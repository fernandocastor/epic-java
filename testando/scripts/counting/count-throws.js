ObjectId = new Function;

r = [{
	"ex" : "java.lang.Throwable",
	"methods" : [
		"bsh.XThis.Handler::invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])",
		"installer.CBZip2OutputStream::finalize()"
	],
	"_id" : ObjectId("50314c12d622d44125000001")
},
{
	"ex" : "java.util.NoSuchElementException",
	"methods" : [
		"gnu.regexp.REMatchEnumeration::nextElement()",
		"gnu.regexp.REMatchEnumeration::nextMatch()"
	],
	"_id" : ObjectId("50314c2f391233f727000001")
},
{
	"ex" : "bsh.ParseException",
	"methods" : [
		"bsh.Interpreter::Line()",
		"bsh.Parser::main(java.lang.String[])",
		"bsh.Parser::Line()",
		"bsh.Parser::Modifiers(int,boolean)",
		"bsh.Parser::ClassDeclaration()",
		"bsh.Parser::MethodDeclaration()",
		"bsh.Parser::PackageDeclaration()",
		"bsh.Parser::ImportDeclaration()",
		"bsh.Parser::VariableDeclarator()",
		"bsh.Parser::VariableInitializer()",
		"bsh.Parser::ArrayInitializer()",
		"bsh.Parser::FormalParameters()",
		"bsh.Parser::FormalParameter()",
		"bsh.Parser::Type()",
		"bsh.Parser::ReturnType()",
		"bsh.Parser::PrimitiveType()",
		"bsh.Parser::AmbiguousName()",
		"bsh.Parser::NameList()",
		"bsh.Parser::Expression()",
		"bsh.Parser::Assignment()",
		"bsh.Parser::AssignmentOperator()",
		"bsh.Parser::ConditionalExpression()",
		"bsh.Parser::ConditionalOrExpression()",
		"bsh.Parser::ConditionalAndExpression()",
		"bsh.Parser::InclusiveOrExpression()",
		"bsh.Parser::ExclusiveOrExpression()",
		"bsh.Parser::AndExpression()",
		"bsh.Parser::EqualityExpression()",
		"bsh.Parser::InstanceOfExpression()",
		"bsh.Parser::RelationalExpression()",
		"bsh.Parser::ShiftExpression()",
		"bsh.Parser::AdditiveExpression()",
		"bsh.Parser::MultiplicativeExpression()",
		"bsh.Parser::UnaryExpression()",
		"bsh.Parser::PreIncrementExpression()",
		"bsh.Parser::PreDecrementExpression()",
		"bsh.Parser::UnaryExpressionNotPlusMinus()",
		"bsh.Parser::CastLookahead()",
		"bsh.Parser::PostfixExpression()",
		"bsh.Parser::CastExpression()",
		"bsh.Parser::PrimaryExpression()",
		"bsh.Parser::MethodInvocation()",
		"bsh.Parser::PrimaryPrefix()",
		"bsh.Parser::PrimarySuffix()",
		"bsh.Parser::Literal()",
		"bsh.Parser::BooleanLiteral()",
		"bsh.Parser::NullLiteral()",
		"bsh.Parser::VoidLiteral()",
		"bsh.Parser::Arguments()",
		"bsh.Parser::ArgumentList()",
		"bsh.Parser::AllocationExpression()",
		"bsh.Parser::ArrayDimensions()",
		"bsh.Parser::Statement()",
		"bsh.Parser::LabeledStatement()",
		"bsh.Parser::Block()",
		"bsh.Parser::BlockStatement()",
		"bsh.Parser::FormalComment()",
		"bsh.Parser::EmptyStatement()",
		"bsh.Parser::StatementExpression()",
		"bsh.Parser::SwitchStatement()",
		"bsh.Parser::SwitchLabel()",
		"bsh.Parser::IfStatement()",
		"bsh.Parser::WhileStatement()",
		"bsh.Parser::DoStatement()",
		"bsh.Parser::ForStatement()",
		"bsh.Parser::EnhancedForStatement()",
		"bsh.Parser::ForInit()",
		"bsh.Parser::TypedVariableDeclaration()",
		"bsh.Parser::StatementExpressionList()",
		"bsh.Parser::ForUpdate()",
		"bsh.Parser::BreakStatement()",
		"bsh.Parser::ContinueStatement()",
		"bsh.Parser::ReturnStatement()",
		"bsh.Parser::SynchronizedStatement()",
		"bsh.Parser::ThrowStatement()",
		"bsh.Parser::TryStatement()",
		"bsh.Parser::jj_consume_token(int)"
	],
	"_id" : ObjectId("50314bd77a8413eb1e000001")
},
{
	"ex" : "java.lang.IllegalArgumentException",
	"methods" : [
		"bsh.CollectionManager::getBshIterator(java.lang.Object)",
		"bsh.collection.CollectionManagerImpl::getBshIterator(java.lang.Object)"
	],
	"_id" : ObjectId("50314c0391002ea223000001")
},
{
	"ex" : "bsh.UtilTargetError",
	"methods" : [
		"bsh.Reflect::getIndex(java.lang.Object,int)",
		"bsh.Reflect::setIndex(java.lang.Object,int,java.lang.Object)"
	],
	"_id" : ObjectId("50314c0924123a4424000001")
},
{
	"ex" : "java.lang.NoSuchFieldException",
	"methods" : [
		"bsh.Reflect::findAccessibleField(java.lang.Class,java.lang.String)"
	],
	"_id" : ObjectId("50314c0c1e70a9aa24000001")
},
{
	"ex" : "bsh.ReflectError",
	"methods" : [
		"bsh.Name::invokeMethod(bsh.Interpreter,java.lang.Object[],bsh.CallStack,bsh.SimpleNode)",
		"bsh.BSHPrimarySuffix::doName(java.lang.Object,boolean,bsh.CallStack,bsh.Interpreter)",
		"bsh.BSHPrimarySuffix::doIndex(java.lang.Object,boolean,bsh.CallStack,bsh.Interpreter)",
		"bsh.ClassGenerator::invokeSuperclassMethod(bsh.BshClassManager,java.lang.Object,java.lang.String,java.lang.Object[])",
		"bsh.ClassGeneratorImpl::invokeSuperclassMethod(bsh.BshClassManager,java.lang.Object,java.lang.String,java.lang.Object[])",
		"bsh.ClassGeneratorImpl::invokeSuperclassMethodImpl(bsh.BshClassManager,java.lang.Object,java.lang.String,java.lang.Object[])",
		"bsh.Reflect::invokeObjectMethod(java.lang.Object,java.lang.String,java.lang.Object[],bsh.Interpreter,bsh.CallStack,bsh.SimpleNode)",
		"bsh.Reflect::invokeStaticMethod(bsh.BshClassManager,java.lang.Class,java.lang.String,java.lang.Object[])",
		"bsh.Reflect::invokeOnMethod(java.lang.reflect.Method,java.lang.Object,java.lang.Object[])",
		"bsh.Reflect::getIndex(java.lang.Object,int)",
		"bsh.Reflect::setIndex(java.lang.Object,int,java.lang.Object)",
		"bsh.Reflect::getStaticField(java.lang.Class,java.lang.String)",
		"bsh.Reflect::getObjectField(java.lang.Object,java.lang.String)",
		"bsh.Reflect::getLHSStaticField(java.lang.Class,java.lang.String)",
		"bsh.Reflect::getLHSObjectField(java.lang.Object,java.lang.String)",
		"bsh.Reflect::getFieldValue(java.lang.Class,java.lang.Object,java.lang.String,boolean)",
		"bsh.Reflect::resolveExpectedJavaField(java.lang.Class,java.lang.String,boolean)",
		"bsh.Reflect::resolveExpectedJavaMethod(bsh.BshClassManager,java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object[],boolean)",
		"bsh.Reflect::constructObject(java.lang.Class,java.lang.Object[])",
		"bsh.Reflect::getObjectProperty(java.lang.Object,java.lang.String)",
		"bsh.Reflect::setObjectProperty(java.lang.Object,java.lang.String,java.lang.Object)",
		"bsh.Reflect::getArrayBaseType(java.lang.Class)"
	],
	"_id" : ObjectId("50314bf332d6a9f721000001")
},
{
	"ex" : "bsh.Capabilities.Unavailable",
	"methods" : [
		"bsh.ReflectManager::getReflectManager()",
		"bsh.ReflectManager::RMSetAccessible(java.lang.Object)"
	],
	"_id" : ObjectId("50314c10aff2d8fb24000001")
},
{
	"ex" : "com.microstar.xml.XmlException",
	"methods" : [
		"com.microstar.xml.HandlerBase::error(java.lang.String,java.lang.String,int,int)"
	],
	"_id" : ObjectId("50314c15b7f4b9a225000001")
},
{
	"ex" : "java.lang.Exception",
	"methods" : [
		"bsh.Interpreter::invokeMain(java.lang.Class,java.lang.String[])",
		"bsh.CommandLineReader::main(java.lang.String[])",
		"bsh.Remote::main(java.lang.String[])",
		"com.microstar.xml.HandlerBase::startDocument()",
		"com.microstar.xml.HandlerBase::endDocument()",
		"com.microstar.xml.HandlerBase::resolveEntity(java.lang.String,java.lang.String)",
		"com.microstar.xml.HandlerBase::startExternalEntity(java.lang.String)",
		"com.microstar.xml.HandlerBase::endExternalEntity(java.lang.String)",
		"com.microstar.xml.HandlerBase::doctypeDecl(java.lang.String,java.lang.String,java.lang.String)",
		"com.microstar.xml.HandlerBase::attribute(java.lang.String,java.lang.String,boolean)",
		"com.microstar.xml.HandlerBase::startElement(java.lang.String)",
		"com.microstar.xml.HandlerBase::endElement(java.lang.String)",
		"com.microstar.xml.HandlerBase::charData(char[],int,int)",
		"com.microstar.xml.HandlerBase::ignorableWhitespace(char[],int,int)",
		"com.microstar.xml.HandlerBase::processingInstruction(java.lang.String,java.lang.String)",
		"com.microstar.xml.HandlerBase::error(java.lang.String,java.lang.String,int,int)",
		"com.microstar.xml.XmlHandler::startDocument()",
		"com.microstar.xml.XmlHandler::endDocument()",
		"com.microstar.xml.XmlHandler::resolveEntity(java.lang.String,java.lang.String)",
		"com.microstar.xml.XmlHandler::startExternalEntity(java.lang.String)",
		"com.microstar.xml.XmlHandler::endExternalEntity(java.lang.String)",
		"com.microstar.xml.XmlHandler::doctypeDecl(java.lang.String,java.lang.String,java.lang.String)",
		"com.microstar.xml.XmlHandler::attribute(java.lang.String,java.lang.String,boolean)",
		"com.microstar.xml.XmlHandler::startElement(java.lang.String)",
		"com.microstar.xml.XmlHandler::endElement(java.lang.String)",
		"com.microstar.xml.XmlHandler::charData(char[],int,int)",
		"com.microstar.xml.XmlHandler::ignorableWhitespace(char[],int,int)",
		"com.microstar.xml.XmlHandler::processingInstruction(java.lang.String,java.lang.String)",
		"com.microstar.xml.XmlHandler::error(java.lang.String,java.lang.String,int,int)",
		"com.microstar.xml.XmlParser::parse(java.lang.String,java.lang.String,java.lang.String)",
		"com.microstar.xml.XmlParser::parse(java.lang.String,java.lang.String,java.io.InputStream,java.lang.String)",
		"com.microstar.xml.XmlParser::parse(java.lang.String,java.lang.String,java.io.Reader)",
		"com.microstar.xml.XmlParser::doParse(java.lang.String,java.lang.String,java.io.Reader,java.io.InputStream,java.lang.String)",
		"com.microstar.xml.XmlParser::error(java.lang.String,java.lang.String,java.lang.String)",
		"com.microstar.xml.XmlParser::error(java.lang.String,char,java.lang.String)",
		"com.microstar.xml.XmlParser::parseDocument()",
		"com.microstar.xml.XmlParser::parseComment()",
		"com.microstar.xml.XmlParser::parsePI()",
		"com.microstar.xml.XmlParser::parseCDSect()",
		"com.microstar.xml.XmlParser::parseProlog()",
		"com.microstar.xml.XmlParser::parseXMLDecl(boolean)",
		"com.microstar.xml.XmlParser::parseTextDecl(boolean)",
		"com.microstar.xml.XmlParser::checkEncoding(java.lang.String,boolean)",
		"com.microstar.xml.XmlParser::parseMisc()",
		"com.microstar.xml.XmlParser::parseDoctypedecl()",
		"com.microstar.xml.XmlParser::parseMarkupdecl()",
		"com.microstar.xml.XmlParser::parseElement()",
		"com.microstar.xml.XmlParser::parseAttribute(java.lang.String)",
		"com.microstar.xml.XmlParser::parseEq()",
		"com.microstar.xml.XmlParser::parseETag()",
		"com.microstar.xml.XmlParser::parseContent()",
		"com.microstar.xml.XmlParser::parseElementdecl()",
		"com.microstar.xml.XmlParser::parseContentspec(java.lang.String)",
		"com.microstar.xml.XmlParser::parseElements()",
		"com.microstar.xml.XmlParser::parseCp()",
		"com.microstar.xml.XmlParser::parseMixed()",
		"com.microstar.xml.XmlParser::parseAttlistDecl()",
		"com.microstar.xml.XmlParser::parseAttDef(java.lang.String)",
		"com.microstar.xml.XmlParser::readAttType()",
		"com.microstar.xml.XmlParser::parseEnumeration()",
		"com.microstar.xml.XmlParser::parseNotationType()",
		"com.microstar.xml.XmlParser::parseDefault(java.lang.String,java.lang.String,int,java.lang.String)",
		"com.microstar.xml.XmlParser::parseConditionalSect()",
		"com.microstar.xml.XmlParser::parseCharRef()",
		"com.microstar.xml.XmlParser::parseEntityRef(boolean)",
		"com.microstar.xml.XmlParser::parsePEReference(boolean)",
		"com.microstar.xml.XmlParser::parseEntityDecl()",
		"com.microstar.xml.XmlParser::parseNotationDecl()",
		"com.microstar.xml.XmlParser::parsePCData()",
		"com.microstar.xml.XmlParser::requireWhitespace()",
		"com.microstar.xml.XmlParser::parseWhitespace()",
		"com.microstar.xml.XmlParser::skipWhitespace()",
		"com.microstar.xml.XmlParser::readNmtoken(boolean)",
		"com.microstar.xml.XmlParser::readLiteral(int)",
		"com.microstar.xml.XmlParser::readExternalIds(boolean)",
		"com.microstar.xml.XmlParser::dataBufferFlush()",
		"com.microstar.xml.XmlParser::require(java.lang.String)",
		"com.microstar.xml.XmlParser::require(char)",
		"com.microstar.xml.XmlParser::setElement(java.lang.String,int,java.lang.String,java.util.Hashtable)",
		"com.microstar.xml.XmlParser::setAttribute(java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,int)",
		"com.microstar.xml.XmlParser::setNotation(java.lang.String,java.lang.String,java.lang.String)",
		"com.microstar.xml.XmlParser::readCh()",
		"com.microstar.xml.XmlParser::unread(char)",
		"com.microstar.xml.XmlParser::unread(char[],int)",
		"com.microstar.xml.XmlParser::pushURL(java.lang.String,java.lang.String,java.lang.String,java.io.Reader,java.io.InputStream,java.lang.String)",
		"com.microstar.xml.XmlParser::tryEncodingDecl(boolean)",
		"com.microstar.xml.XmlParser::detectEncoding()",
		"com.microstar.xml.XmlParser::pushString(java.lang.String,java.lang.String)",
		"com.microstar.xml.XmlParser::pushCharArray(java.lang.String,char[],int,int)",
		"com.microstar.xml.XmlParser::pushInput(java.lang.String)",
		"com.microstar.xml.XmlParser::popInput()",
		"com.microstar.xml.XmlParser::tryRead(char)",
		"com.microstar.xml.XmlParser::tryRead(java.lang.String)",
		"com.microstar.xml.XmlParser::tryWhitespace()",
		"com.microstar.xml.XmlParser::parseUntil(java.lang.String)",
		"com.microstar.xml.XmlParser::skipUntil(java.lang.String)",
		"com.microstar.xml.XmlParser::read8bitEncodingDeclaration()",
		"com.microstar.xml.XmlParser::readDataChunk()",
		"com.microstar.xml.XmlParser::copyUtf8ReadBuffer(int)",
		"com.microstar.xml.XmlParser::getNextUtf8Byte(int,int)",
		"com.microstar.xml.XmlParser::copyUcs2ReadBuffer(int,int,int)",
		"com.microstar.xml.XmlParser::copyUcs4ReadBuffer(int,int,int,int,int)",
		"com.microstar.xml.XmlParser::encodingError(java.lang.String,int,int)",
		"org.gjt.sp.jedit.BeanShell::_runScript(org.gjt.sp.jedit.View,java.lang.String,java.io.Reader,boolean)",
		"org.gjt.sp.jedit.BeanShell::_runScript(org.gjt.sp.jedit.View,java.lang.String,java.io.Reader,bsh.NameSpace)",
		"org.gjt.sp.jedit.BeanShell::_eval(org.gjt.sp.jedit.View,bsh.NameSpace,java.lang.String)",
		"org.gjt.sp.jedit.BeanShell::cacheBlock(java.lang.String,java.lang.String,boolean)",
		"org.gjt.sp.jedit.BeanShell::runCachedBlock(bsh.BshMethod,org.gjt.sp.jedit.View,bsh.NameSpace)",
		"org.gjt.sp.jedit.BeanShell::unwrapException(java.lang.Exception)",
		"org.gjt.sp.jedit.pluginmgr.PluginList::PluginList()",
		"org.gjt.sp.jedit.pluginmgr.MirrorList::MirrorList()",
		"org.gjt.sp.jedit.search.SearchAndReplace::initReplace()",
		"org.gjt.sp.jedit.search.SearchAndReplace::replaceInSelection(org.gjt.sp.jedit.textarea.JEditTextArea,org.gjt.sp.jedit.Buffer,org.gjt.sp.jedit.search.SearchMatcher,boolean,org.gjt.sp.jedit.textarea.Selection)",
		"org.gjt.sp.jedit.search.SearchAndReplace::_replace(org.gjt.sp.jedit.Buffer,org.gjt.sp.jedit.search.SearchMatcher,int,int,boolean)",
		"org.gjt.sp.jedit.search.SearchAndReplace::replaceOne(org.gjt.sp.jedit.Buffer,org.gjt.sp.jedit.search.SearchMatcher.Match,int,java.lang.String,boolean)",
		"org.gjt.sp.jedit.search.SearchAndReplace::replaceOne(org.gjt.sp.jedit.search.SearchMatcher.Match,java.lang.String)",
		"org.gjt.sp.jedit.search.SearchAndReplace::regexpBeanShellReplace(org.gjt.sp.jedit.search.SearchMatcher.Match)",
		"org.gjt.sp.jedit.search.SearchAndReplace::literalBeanShellReplace(java.lang.String)"
	],
	"_id" : ObjectId("50314bd4016851871e000001")
},
{
	"ex" : "gnu.regexp.REException",
	"methods" : [
		"gnu.regexp.RE::RE(java.lang.Object)",
		"gnu.regexp.RE::RE(java.lang.Object,int)",
		"gnu.regexp.RE::RE(java.lang.Object,int,gnu.regexp.RESyntax)",
		"gnu.regexp.RE::RE(java.lang.Object,int,gnu.regexp.RESyntax,int,int)",
		"gnu.regexp.RE::initialize(java.lang.Object,int,gnu.regexp.RESyntax,int,int)",
		"gnu.regexp.RE::getCharUnit(char[],int,gnu.regexp.CharUnit)",
		"gnu.regexp.RE::setRepeated(gnu.regexp.REToken,int,int,int)",
		"gnu.regexp.RE::getMinMax(char[],int,gnu.regexp.IntPair,gnu.regexp.RESyntax)",
		"gnu.regexp.RE::RE(java.lang.Object)",
		"gnu.regexp.RE::RE(java.lang.Object,int)",
		"gnu.regexp.RE::RE(java.lang.Object,int,gnu.regexp.RESyntax)",
		"gnu.regexp.RE::RE(java.lang.Object,int,gnu.regexp.RESyntax,int,int)",
		"gnu.regexp.RE::initialize(java.lang.Object,int,gnu.regexp.RESyntax,int,int)",
		"gnu.regexp.RE::getCharUnit(char[],int,gnu.regexp.CharUnit)",
		"gnu.regexp.RE::setRepeated(gnu.regexp.REToken,int,int,int)",
		"gnu.regexp.RE::getMinMax(char[],int,gnu.regexp.IntPair,gnu.regexp.RESyntax)",
		"gnu.regexp.RE::RE(java.lang.Object)",
		"gnu.regexp.RE::RE(java.lang.Object,int)",
		"gnu.regexp.RE::RE(java.lang.Object,int,gnu.regexp.RESyntax)",
		"gnu.regexp.RE::RE(java.lang.Object,int,gnu.regexp.RESyntax,int,int)",
		"gnu.regexp.RE::initialize(java.lang.Object,int,gnu.regexp.RESyntax,int,int)",
		"gnu.regexp.RE::getCharUnit(char[],int,gnu.regexp.CharUnit)",
		"gnu.regexp.RE::setRepeated(gnu.regexp.REToken,int,int,int)",
		"gnu.regexp.RE::getMinMax(char[],int,gnu.regexp.IntPair,gnu.regexp.RESyntax)",
		"gnu.regexp.RETokenLookAhead::RETokenLookAhead(gnu.regexp.REToken,boolean)",
		"org.gjt.sp.jedit.Buffer::getRegexpProperty(java.lang.String,int,gnu.regexp.RESyntax)",
		"org.gjt.sp.jedit.syntax.ParserRule::createRegexpSequenceRule(char,int,java.lang.String,org.gjt.sp.jedit.syntax.ParserRuleSet,byte,boolean)",
		"org.gjt.sp.jedit.syntax.ParserRule::createRegexpSpanRule(char,int,java.lang.String,int,java.lang.String,org.gjt.sp.jedit.syntax.ParserRuleSet,byte,boolean,boolean,boolean,boolean,boolean)",
		"org.gjt.sp.jedit.syntax.ParserRule::createRegexpEOLSpanRule(char,int,java.lang.String,org.gjt.sp.jedit.syntax.ParserRuleSet,byte,boolean,boolean)",
		"org.gjt.sp.jedit.search.RESearchMatcher::RESearchMatcher(java.lang.String,boolean)",
		"org.gjt.sp.jedit.search.SearchAndReplace::getSearchMatcher()",
		"org.gjt.sp.jedit.search.SearchAndReplace::find(org.gjt.sp.jedit.View,org.gjt.sp.jedit.Buffer,int)",
		"org.gjt.sp.jedit.search.SearchAndReplace::find(org.gjt.sp.jedit.View,org.gjt.sp.jedit.Buffer,int,boolean,boolean)"
	],
	"_id" : ObjectId("50314c2afbfb467427000001")
},
{
	"ex" : "installer.InvalidHeaderException",
	"methods" : [
		"installer.TarEntry::TarEntry(java.io.File)",
		"installer.TarEntry::TarEntry(byte[])",
		"installer.TarEntry::getFileTarHeader(installer.TarHeader,java.io.File)",
		"installer.TarEntry::getDirectoryEntries()",
		"installer.TarEntry::parseTarHeader(installer.TarHeader,byte[])",
		"installer.TarHeader::parseOctal(byte[],int,int)",
		"installer.TarHeader::parseName(byte[],int,int)",
		"installer.TarInputStream.EntryFactory::createEntry(java.io.File)",
		"installer.TarInputStream.EntryFactory::createEntry(byte[])",
		"installer.TarInputStream.EntryAdapter::createEntry(java.io.File)",
		"installer.TarInputStream.EntryAdapter::createEntry(byte[])"
	],
	"_id" : ObjectId("50314c37227b05c828000001")
},
{
	"ex" : "java.lang.ClassNotFoundException",
	"methods" : [
		"bsh.Interpreter::readObject(java.io.ObjectInputStream)",
		"bsh.BshClassManager::plainClassForName(java.lang.String)",
		"bsh.Name::toClass()",
		"org.gjt.sp.jedit.JARClassLoader::loadClass(java.lang.String,boolean)",
		"org.gjt.sp.jedit.JARClassLoader::_loadClass(java.lang.String,boolean)"
	],
	"_id" : ObjectId("50314bd8d80f5dfa1e000001")
},
{
	"ex" : "java.awt.datatransfer.UnsupportedFlavorException",
	"methods" : [
		"org.gjt.sp.jedit.Java14.TextAreaTransferHandler::importFile(javax.swing.JComponent,java.awt.datatransfer.Transferable)",
		"org.gjt.sp.jedit.Java14.TextAreaTransferHandler::importText(javax.swing.JComponent,java.awt.datatransfer.Transferable)"
	],
	"_id" : ObjectId("50314c45e8ed00122a000001")
},
{
	"ex" : "java.io.FileNotFoundException",
	"methods" : [
		"bsh.Interpreter::source(java.lang.String,bsh.NameSpace)",
		"bsh.Interpreter::source(java.lang.String)",
		"bsh.Remote::getFile(java.lang.String)",
		"org.gjt.sp.jedit.help.HelpIndex::indexURL(java.lang.String)",
		"org.gjt.sp.jedit.io.FileVFS::_createOutputStream(java.lang.Object,java.lang.String,java.awt.Component)"
	],
	"_id" : ObjectId("50314bd4d9a5c58c1e000001")
},
{
	"ex" : "java.net.MalformedURLException",
	"methods" : [
		"org.gjt.sp.jedit.PluginJAR.PluginCacheEntry::readURI(java.io.DataInputStream)",
		"org.gjt.sp.jedit.help.HelpIndex::indexDirectory(java.lang.String)",
		"org.gjt.sp.jedit.help.HelpIndex::indexURL(java.lang.String)",
		"org.gjt.sp.jedit.pluginmgr.PluginList::PluginList()",
		"org.gjt.sp.jedit.pluginmgr.MirrorList::MirrorList()"
	],
	"_id" : ObjectId("50314c3f836e578429000001")
},
{
	"ex" : "bsh.EvalError",
	"methods" : [
		"bsh.BSHAllocationExpression::eval(bsh.CallStack,bsh.Interpreter)",
		"bsh.BSHAllocationExpression::objectAllocation(bsh.BSHAmbiguousName,bsh.BSHArguments,bsh.CallStack,bsh.Interpreter)",
		"bsh.BSHAllocationExpression::constructObject(java.lang.Class,java.lang.Object[],bsh.CallStack)",
		"bsh.BSHAllocationExpression::constructWithClassBody(java.lang.Class,java.lang.Object[],bsh.BSHBlock,bsh.CallStack,bsh.Interpreter)",
		"bsh.BSHAllocationExpression::constructWithInterfaceBody(java.lang.Class,java.lang.Object[],bsh.BSHBlock,bsh.CallStack,bsh.Interpreter)",
		"bsh.BSHAllocationExpression::objectArrayAllocation(bsh.BSHAmbiguousName,bsh.BSHArrayDimensions,bsh.CallStack,bsh.Interpreter)",
		"bsh.BSHAllocationExpression::primitiveArrayAllocation(bsh.BSHPrimitiveType,bsh.BSHArrayDimensions,bsh.CallStack,bsh.Interpreter)",
		"bsh.BSHAllocationExpression::arrayAllocation(bsh.BSHArrayDimensions,java.lang.Class,bsh.CallStack,bsh.Interpreter)",
		"bsh.BSHAllocationExpression::arrayNewInstance(java.lang.Class,bsh.BSHArrayDimensions,bsh.CallStack)",
		"bsh.SimpleNode::eval(bsh.CallStack,bsh.Interpreter)",
		"bsh.Interpreter::source(java.lang.String,bsh.NameSpace)",
		"bsh.Interpreter::source(java.lang.String)",
		"bsh.Interpreter::eval(java.io.Reader,bsh.NameSpace,java.lang.String)",
		"bsh.Interpreter::eval(java.io.Reader)",
		"bsh.Interpreter::eval(java.lang.String)",
		"bsh.Interpreter::eval(java.lang.String,bsh.NameSpace)",
		"bsh.Interpreter::get(java.lang.String)",
		"bsh.Interpreter::set(java.lang.String,java.lang.Object)",
		"bsh.Interpreter::set(java.lang.String,long)",
		"bsh.Interpreter::set(java.lang.String,int)",
		"bsh.Interpreter::set(java.lang.String,double)",
		"bsh.Interpreter::set(java.lang.String,float)",
		"bsh.Interpreter::set(java.lang.String,boolean)",
		"bsh.Interpreter::unset(java.lang.String)",
		"bsh.Interpreter::getInterface(java.lang.Class)",
		"bsh.EvalError::reThrow(java.lang.String)",
		"bsh.BSHAmbiguousName::toObject(bsh.CallStack,bsh.Interpreter)",
		"bsh.BSHAmbiguousName::toObject(bsh.CallStack,bsh.Interpreter,boolean)",
		"bsh.BSHAmbiguousName::toClass(bsh.CallStack,bsh.Interpreter)",
		"bsh.BSHAmbiguousName::toLHS(bsh.CallStack,bsh.Interpreter)",
		"bsh.BSHAmbiguousName::eval(bsh.CallStack,bsh.Interpreter)",
		"bsh.BSHArguments::getArguments(bsh.CallStack,bsh.Interpreter)",
		"bsh.BSHBlock::eval(bsh.CallStack,bsh.Interpreter)",
		"bsh.BSHBlock::eval(bsh.CallStack,bsh.Interpreter,boolean)",
		"bsh.BSHBlock::evalBlock(bsh.CallStack,bsh.Interpreter,boolean,bsh.BSHBlock.NodeFilter)",
		"bsh.BSHArrayDimensions::eval(java.lang.Class,bsh.CallStack,bsh.Interpreter)",
		"bsh.BSHArrayDimensions::eval(bsh.CallStack,bsh.Interpreter)",
		"bsh.NameSpace::invokeMethod(java.lang.String,java.lang.Object[],bsh.Interpreter)",
		"bsh.NameSpace::invokeMethod(java.lang.String,java.lang.Object[],bsh.Interpreter,bsh.CallStack,bsh.SimpleNode)",
		"bsh.This::invokeMethod(java.lang.String,java.lang.Object[])",
		"bsh.This::invokeMethod(java.lang.String,java.lang.Object[],bsh.Interpreter,bsh.CallStack,bsh.SimpleNode,boolean)",
		"bsh.Name::invokeMethod(bsh.Interpreter,java.lang.Object[],bsh.CallStack,bsh.SimpleNode)",
		"bsh.Name::invokeLocalMethod(bsh.Interpreter,java.lang.Object[],bsh.CallStack,bsh.SimpleNode)",
		"bsh.BshMethod::invoke(java.lang.Object[],bsh.Interpreter)",
		"bsh.BshMethod::invoke(java.lang.Object[],bsh.Interpreter,bsh.CallStack)",
		"bsh.BshMethod::invoke(java.lang.Object[],bsh.Interpreter,bsh.CallStack,bsh.SimpleNode)",
		"bsh.BshMethod::invoke(java.lang.Object[],bsh.Interpreter,bsh.CallStack,bsh.SimpleNode,boolean)",
		"bsh.BshMethod::invokeImpl(java.lang.Object[],bsh.Interpreter,bsh.CallStack,bsh.SimpleNode,boolean)",
		"bsh.BSHMethodDeclaration::evalReturnType(bsh.CallStack,bsh.Interpreter)",
		"bsh.BSHMethodDeclaration::eval(bsh.CallStack,bsh.Interpreter)",
		"bsh.BSHMethodDeclaration::evalNodes(bsh.CallStack,bsh.Interpreter)",
		"bsh.BSHReturnType::evalReturnType(bsh.CallStack,bsh.Interpreter)",
		"bsh.BSHFormalParameters::eval(bsh.CallStack,bsh.Interpreter)",
		"bsh.BSHType::getType(bsh.CallStack,bsh.Interpreter)",
		"bsh.BSHArrayInitializer::eval(bsh.CallStack,bsh.Interpreter)",
		"bsh.BSHArrayInitializer::eval(java.lang.Class,int,bsh.CallStack,bsh.Interpreter)",
		"bsh.BSHArrayInitializer::throwTypeError(java.lang.Class,java.lang.Object,int,bsh.CallStack)",
		"bsh.BSHAssignment::eval(bsh.CallStack,bsh.Interpreter)",
		"bsh.BSHBinaryExpression::eval(bsh.CallStack,bsh.Interpreter)",
		"bsh.BSHCastExpression::eval(bsh.CallStack,bsh.Interpreter)",
		"bsh.BSHClassDeclaration::eval(bsh.CallStack,bsh.Interpreter)",
		"bsh.BSHEnhancedForStatement::eval(bsh.CallStack,bsh.Interpreter)",
		"bsh.BSHForStatement::eval(bsh.CallStack,bsh.Interpreter)",
		"bsh.BSHFormalParameter::eval(bsh.CallStack,bsh.Interpreter)",
		"bsh.BSHIfStatement::eval(bsh.CallStack,bsh.Interpreter)",
		"bsh.BSHIfStatement::evaluateCondition(bsh.SimpleNode,bsh.CallStack,bsh.Interpreter)",
		"bsh.BSHImportDeclaration::eval(bsh.CallStack,bsh.Interpreter)",
		"bsh.BSHLiteral::eval(bsh.CallStack,bsh.Interpreter)",
		"bsh.BSHMethodInvocation::eval(bsh.CallStack,bsh.Interpreter)",
		"bsh.BSHPackageDeclaration::eval(bsh.CallStack,bsh.Interpreter)",
		"bsh.BSHPrimaryExpression::eval(bsh.CallStack,bsh.Interpreter)",
		"bsh.BSHPrimaryExpression::toLHS(bsh.CallStack,bsh.Interpreter)",
		"bsh.BSHPrimaryExpression::eval(boolean,bsh.CallStack,bsh.Interpreter)",
		"bsh.BSHPrimarySuffix::doSuffix(java.lang.Object,boolean,bsh.CallStack,bsh.Interpreter)",
		"bsh.BSHPrimarySuffix::doName(java.lang.Object,boolean,bsh.CallStack,bsh.Interpreter)",
		"bsh.BSHPrimarySuffix::getIndexAux(java.lang.Object,bsh.CallStack,bsh.Interpreter,bsh.SimpleNode)",
		"bsh.BSHPrimarySuffix::doIndex(java.lang.Object,boolean,bsh.CallStack,bsh.Interpreter)",
		"bsh.BSHPrimarySuffix::doProperty(boolean,java.lang.Object,bsh.CallStack,bsh.Interpreter)",
		"bsh.BSHReturnStatement::eval(bsh.CallStack,bsh.Interpreter)",
		"bsh.BSHStatementExpressionList::eval(bsh.CallStack,bsh.Interpreter)",
		"bsh.BSHSwitchLabel::eval(bsh.CallStack,bsh.Interpreter)",
		"bsh.BSHSwitchStatement::eval(bsh.CallStack,bsh.Interpreter)",
		"bsh.BSHSwitchStatement::primitiveEquals(java.lang.Object,java.lang.Object,bsh.CallStack,bsh.SimpleNode)",
		"bsh.BSHTernaryExpression::eval(bsh.CallStack,bsh.Interpreter)",
		"bsh.BSHThrowStatement::eval(bsh.CallStack,bsh.Interpreter)",
		"bsh.BSHTryStatement::eval(bsh.CallStack,bsh.Interpreter)",
		"bsh.BSHTypedVariableDeclaration::evalType(bsh.CallStack,bsh.Interpreter)",
		"bsh.BSHTypedVariableDeclaration::eval(bsh.CallStack,bsh.Interpreter)",
		"bsh.BSHVariableDeclarator::eval(bsh.BSHType,bsh.CallStack,bsh.Interpreter)",
		"bsh.BSHUnaryExpression::eval(bsh.CallStack,bsh.Interpreter)",
		"bsh.BSHWhileStatement::eval(bsh.CallStack,bsh.Interpreter)",
		"bsh.BlockNameSpace::BlockNameSpace(bsh.NameSpace)",
		"bsh.ClassGenerator::generateClass(java.lang.String,bsh.Modifiers,java.lang.Class[],java.lang.Class,bsh.BSHBlock,boolean,bsh.CallStack,bsh.Interpreter)",
		"bsh.ClassGeneratorImpl::generateClass(java.lang.String,bsh.Modifiers,java.lang.Class[],java.lang.Class,bsh.BSHBlock,boolean,bsh.CallStack,bsh.Interpreter)",
		"bsh.ClassGeneratorImpl::generateClassImpl(java.lang.String,bsh.Modifiers,java.lang.Class[],java.lang.Class,bsh.BSHBlock,boolean,bsh.CallStack,bsh.Interpreter)",
		"bsh.ClassGeneratorImpl::getDeclaredVariables(bsh.BSHBlock,bsh.CallStack,bsh.Interpreter,java.lang.String)",
		"bsh.ClassGeneratorImpl::getDeclaredMethods(bsh.BSHBlock,bsh.CallStack,bsh.Interpreter,java.lang.String)",
		"bsh.Reflect::invokeObjectMethod(java.lang.Object,java.lang.String,java.lang.Object[],bsh.Interpreter,bsh.CallStack,bsh.SimpleNode)",
		"bsh.XThis.Handler::invokeImpl(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])"
	],
	"_id" : ObjectId("50314bd23273c9551e000001")
},
{
	"ex" : "bsh.UtilEvalError",
	"methods" : [
		"bsh.NameSpace::getClassInstance()",
		"bsh.NameSpace::get(java.lang.String,bsh.Interpreter)",
		"bsh.NameSpace::setVariable(java.lang.String,java.lang.Object)",
		"bsh.NameSpace::setVariable(java.lang.String,java.lang.Object,boolean)",
		"bsh.NameSpace::setLocalVariable(java.lang.String,java.lang.Object,boolean)",
		"bsh.NameSpace::setVariable(java.lang.String,java.lang.Object,boolean,boolean)",
		"bsh.NameSpace::getVariable(java.lang.String)",
		"bsh.NameSpace::getVariable(java.lang.String,boolean)",
		"bsh.NameSpace::getVariableImpl(java.lang.String,boolean)",
		"bsh.NameSpace::unwrapVariable(bsh.Variable)",
		"bsh.NameSpace::setTypedVariable(java.lang.String,java.lang.Class,java.lang.Object,boolean)",
		"bsh.NameSpace::setTypedVariable(java.lang.String,java.lang.Class,java.lang.Object,bsh.Modifiers)",
		"bsh.NameSpace::setMethod(java.lang.String,bsh.BshMethod)",
		"bsh.NameSpace::getMethod(java.lang.String,java.lang.Class[])",
		"bsh.NameSpace::getMethod(java.lang.String,java.lang.Class[],boolean)",
		"bsh.NameSpace::getCommand(java.lang.String,java.lang.Class[],bsh.Interpreter)",
		"bsh.NameSpace::getImportedMethod(java.lang.String,java.lang.Class[])",
		"bsh.NameSpace::getImportedVar(java.lang.String)",
		"bsh.NameSpace::loadScriptedCommand(java.io.InputStream,java.lang.String,java.lang.Class[],java.lang.String,bsh.Interpreter)",
		"bsh.NameSpace::getClass(java.lang.String)",
		"bsh.NameSpace::getClassImpl(java.lang.String)",
		"bsh.NameSpace::getImportedClassImpl(java.lang.String)",
		"bsh.NameSpace::doSuperImport()",
		"bsh.BshClassManager::setClassPath(java.net.URL[])",
		"bsh.BshClassManager::reloadAllClasses()",
		"bsh.BshClassManager::reloadClasses(java.lang.String[])",
		"bsh.BshClassManager::reloadPackage(java.lang.String)",
		"bsh.BshClassManager::doSuperImport()",
		"bsh.BshClassManager::getClassNameByUnqName(java.lang.String)",
		"bsh.This::getInterface(java.lang.Class)",
		"bsh.This::getInterface(java.lang.Class[])",
		"bsh.Name::toObject(bsh.CallStack,bsh.Interpreter)",
		"bsh.Name::toObject(bsh.CallStack,bsh.Interpreter,boolean)",
		"bsh.Name::consumeNextObjectField(bsh.CallStack,bsh.Interpreter,boolean,boolean)",
		"bsh.Name::resolveThisFieldReference(bsh.CallStack,bsh.NameSpace,bsh.Interpreter,java.lang.String,boolean)",
		"bsh.Name::toClass()",
		"bsh.Name::toLHS(bsh.CallStack,bsh.Interpreter)",
		"bsh.Name::invokeMethod(bsh.Interpreter,java.lang.Object[],bsh.CallStack,bsh.SimpleNode)",
		"bsh.LHS::getValue()",
		"bsh.LHS::assign(java.lang.Object,boolean)",
		"bsh.Variable::Variable(java.lang.String,java.lang.Object,bsh.Modifiers)",
		"bsh.Variable::Variable(java.lang.String,java.lang.String,java.lang.Object,bsh.Modifiers)",
		"bsh.Variable::Variable(java.lang.String,java.lang.Class,java.lang.Object,bsh.Modifiers)",
		"bsh.Variable::setValue(java.lang.Object,int)",
		"bsh.Variable::getValue()",
		"bsh.BSHAssignment::operation(java.lang.Object,java.lang.Object,int)",
		"bsh.BSHUnaryExpression::lhsUnaryOperation(bsh.LHS,boolean)",
		"bsh.BSHUnaryExpression::unaryOperation(java.lang.Object,int)",
		"bsh.BSHUnaryExpression::primitiveWrapperUnaryOperation(java.lang.Object,int)",
		"bsh.BlockNameSpace::setVariable(java.lang.String,java.lang.Object,boolean,boolean)",
		"bsh.BlockNameSpace::setBlockVariable(java.lang.String,java.lang.Object)",
		"bsh.BlockNameSpace::setMethod(java.lang.String,bsh.BshMethod)",
		"bsh.ClassGenerator::getClassGenerator()",
		"bsh.ClassGenerator::invokeSuperclassMethod(bsh.BshClassManager,java.lang.Object,java.lang.String,java.lang.Object[])",
		"bsh.ClassGeneratorImpl::invokeSuperclassMethod(bsh.BshClassManager,java.lang.Object,java.lang.String,java.lang.Object[])",
		"bsh.ClassGeneratorImpl::invokeSuperclassMethodImpl(bsh.BshClassManager,java.lang.Object,java.lang.String,java.lang.Object[])",
		"bsh.Primitive::binaryOperation(java.lang.Object,java.lang.Object,int)",
		"bsh.Primitive::binaryOperationImpl(java.lang.Object,java.lang.Object,int)",
		"bsh.Primitive::booleanBinaryOperation(java.lang.Boolean,java.lang.Boolean,int)",
		"bsh.Primitive::doubleBinaryOperation(java.lang.Double,java.lang.Double,int)",
		"bsh.Primitive::floatBinaryOperation(java.lang.Float,java.lang.Float,int)",
		"bsh.Primitive::unaryOperation(bsh.Primitive,int)",
		"bsh.Primitive::booleanUnaryOperation(java.lang.Boolean,int)",
		"bsh.Primitive::intValue()",
		"bsh.Primitive::booleanValue()",
		"bsh.Primitive::numberValue()",
		"bsh.Primitive::castToType(java.lang.Class,int)",
		"bsh.Primitive::castPrimitive(java.lang.Class,java.lang.Class,bsh.Primitive,boolean,int)",
		"bsh.Reflect::invokeStaticMethod(bsh.BshClassManager,java.lang.Class,java.lang.String,java.lang.Object[])",
		"bsh.Reflect::getStaticField(java.lang.Class,java.lang.String)",
		"bsh.Reflect::getObjectField(java.lang.Object,java.lang.String)",
		"bsh.Reflect::getLHSStaticField(java.lang.Class,java.lang.String)",
		"bsh.Reflect::getLHSObjectField(java.lang.Object,java.lang.String)",
		"bsh.Reflect::getFieldValue(java.lang.Class,java.lang.Object,java.lang.String,boolean)",
		"bsh.Reflect::resolveJavaField(java.lang.Class,java.lang.String,boolean)",
		"bsh.Reflect::resolveExpectedJavaField(java.lang.Class,java.lang.String,boolean)",
		"bsh.Reflect::findAccessibleField(java.lang.Class,java.lang.String)",
		"bsh.Reflect::resolveExpectedJavaMethod(bsh.BshClassManager,java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object[],boolean)",
		"bsh.Reflect::resolveJavaMethod(bsh.BshClassManager,java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object[],boolean)",
		"bsh.Reflect::resolveJavaMethod(bsh.BshClassManager,java.lang.Class,java.lang.String,java.lang.Class[],boolean)",
		"bsh.Reflect::findAccessibleMethod(java.lang.Class,java.lang.String,java.lang.Class[])",
		"bsh.Reflect::getObjectProperty(java.lang.Object,java.lang.String)",
		"bsh.Reflect::setObjectProperty(java.lang.Object,java.lang.String,java.lang.Object)",
		"bsh.Reflect::invokeCompiledCommand(java.lang.Class,java.lang.Object[],bsh.Interpreter,bsh.CallStack)",
		"bsh.Types::getAssignableForm(java.lang.Object,java.lang.Class)",
		"bsh.Types::castObject(java.lang.Object,java.lang.Class,int)",
		"bsh.Types::castObject(java.lang.Class,java.lang.Class,java.lang.Object,int,boolean)",
		"org.gjt.sp.jedit.BeanShell::_runScript(org.gjt.sp.jedit.View,java.lang.String,java.io.Reader,boolean)",
		"org.gjt.sp.jedit.BeanShell::_runScript(org.gjt.sp.jedit.View,java.lang.String,java.io.Reader,bsh.NameSpace)",
		"org.gjt.sp.jedit.BeanShell::cacheBlock(java.lang.String,java.lang.String,boolean)",
		"org.gjt.sp.jedit.BeanShell::runCachedBlock(bsh.BshMethod,org.gjt.sp.jedit.View,bsh.NameSpace)",
		"org.gjt.sp.jedit.BeanShell::setupDefaultVariables(bsh.NameSpace,org.gjt.sp.jedit.View)",
		"org.gjt.sp.jedit.BeanShell::resetDefaultVariables(bsh.NameSpace)",
		"org.gjt.sp.jedit.search.SearchAndReplace::initReplace()",
		"org.gjt.sp.jedit.search.SearchAndReplace::replaceInSelection(org.gjt.sp.jedit.textarea.JEditTextArea,org.gjt.sp.jedit.Buffer,org.gjt.sp.jedit.search.SearchMatcher,boolean,org.gjt.sp.jedit.textarea.Selection)",
		"org.gjt.sp.jedit.search.SearchAndReplace::_replace(org.gjt.sp.jedit.Buffer,org.gjt.sp.jedit.search.SearchMatcher,int,int,boolean)",
		"org.gjt.sp.jedit.search.SearchAndReplace::replaceOne(org.gjt.sp.jedit.Buffer,org.gjt.sp.jedit.search.SearchMatcher.Match,int,java.lang.String,boolean)",
		"org.gjt.sp.jedit.search.SearchAndReplace::replaceOne(org.gjt.sp.jedit.search.SearchMatcher.Match,java.lang.String)",
		"org.gjt.sp.jedit.search.SearchAndReplace::regexpBeanShellReplace(org.gjt.sp.jedit.search.SearchMatcher.Match)",
		"org.gjt.sp.jedit.search.SearchAndReplace::literalBeanShellReplace(java.lang.String)"
	],
	"_id" : ObjectId("50314bdac723b73b1f000001")
},
{
	"ex" : "java.lang.reflect.InvocationTargetException",
	"methods" : [
		"bsh.Name::invokeMethod(bsh.Interpreter,java.lang.Object[],bsh.CallStack,bsh.SimpleNode)",
		"bsh.BSHPrimarySuffix::doName(java.lang.Object,boolean,bsh.CallStack,bsh.Interpreter)",
		"bsh.ClassGenerator::invokeSuperclassMethod(bsh.BshClassManager,java.lang.Object,java.lang.String,java.lang.Object[])",
		"bsh.ClassGeneratorImpl::invokeSuperclassMethod(bsh.BshClassManager,java.lang.Object,java.lang.String,java.lang.Object[])",
		"bsh.ClassGeneratorImpl::invokeSuperclassMethodImpl(bsh.BshClassManager,java.lang.Object,java.lang.String,java.lang.Object[])",
		"bsh.Reflect::invokeObjectMethod(java.lang.Object,java.lang.String,java.lang.Object[],bsh.Interpreter,bsh.CallStack,bsh.SimpleNode)",
		"bsh.Reflect::invokeStaticMethod(bsh.BshClassManager,java.lang.Class,java.lang.String,java.lang.Object[])",
		"bsh.Reflect::invokeOnMethod(java.lang.reflect.Method,java.lang.Object,java.lang.Object[])",
		"bsh.Reflect::constructObject(java.lang.Class,java.lang.Object[])"
	],
	"_id" : ObjectId("50314bf3036bd0fc21000001")
},
{
	"ex" : "java.io.IOException",
	"methods" : [
		"bsh.Interpreter::source(java.lang.String,bsh.NameSpace)",
		"bsh.Interpreter::source(java.lang.String)",
		"bsh.Interpreter::pathToFile(java.lang.String)",
		"bsh.Interpreter::readObject(java.io.ObjectInputStream)",
		"bsh.NameSpace::writeObject(java.io.ObjectOutputStream)",
		"bsh.BshClassManager::addClassPath(java.net.URL)",
		"bsh.Parser::main(java.lang.String[])",
		"bsh.JavaCharStream::hexval(char)",
		"bsh.JavaCharStream::FillBuff()",
		"bsh.JavaCharStream::ReadByte()",
		"bsh.JavaCharStream::BeginToken()",
		"bsh.JavaCharStream::readChar()",
		"bsh.CommandLineReader::read()",
		"bsh.CommandLineReader::read(char[],int,int)",
		"bsh.Remote::eval(java.lang.String,java.lang.String,java.lang.StringBuffer)",
		"bsh.Remote::sendLine(java.lang.String,java.io.OutputStream)",
		"bsh.Remote::getFile(java.lang.String)",
		"installer.CBZip2OutputStream::CBZip2OutputStream(java.io.OutputStream)",
		"installer.CBZip2OutputStream::CBZip2OutputStream(java.io.OutputStream,int)",
		"installer.CBZip2OutputStream::close()",
		"installer.CBZip2OutputStream::flush()",
		"installer.CBZip2OutputStream::write(int)",
		"installer.CBZip2OutputStream::bsFinishedWithStream()",
		"installer.CBZip2OutputStream::bsPutIntVS(int,int)",
		"installer.CBZip2OutputStream::bsPutUChar(int)",
		"installer.CBZip2OutputStream::bsPutint(int)",
		"installer.CBZip2OutputStream::bsW(int,int)",
		"installer.CBZip2OutputStream::endBlock()",
		"installer.CBZip2OutputStream::endCompression()",
		"installer.CBZip2OutputStream::initialize()",
		"installer.CBZip2OutputStream::moveToFrontCodeAndSend()",
		"installer.CBZip2OutputStream::sendMTFValues()",
		"installer.CBZip2OutputStream::writeRun()",
		"installer.Install::copy(java.io.InputStream,java.lang.String,installer.Progress)",
		"installer.InstallThread::installComponent(java.lang.String)",
		"installer.OperatingSystem.OSTask::perform(java.lang.String,java.util.Vector)",
		"installer.OperatingSystem::mkdirs(java.lang.String)",
		"installer.OperatingSystem.Unix.ScriptOSTask::perform(java.lang.String,java.util.Vector)",
		"installer.OperatingSystem.Unix.ManPageOSTask::perform(java.lang.String,java.util.Vector)",
		"installer.OperatingSystem.Unix::mkdirs(java.lang.String)",
		"installer.OperatingSystem.Unix::exec(java.lang.String[])",
		"installer.TarBuffer::skipRecord()",
		"installer.TarBuffer::readRecord()",
		"installer.TarBuffer::readBlock()",
		"installer.TarBuffer::writeRecord(byte[])",
		"installer.TarBuffer::writeRecord(byte[],int)",
		"installer.TarBuffer::writeBlock()",
		"installer.TarBuffer::flushBlock()",
		"installer.TarBuffer::close()",
		"installer.TarInputStream::close()",
		"installer.TarInputStream::available()",
		"installer.TarInputStream::skip(int)",
		"installer.TarInputStream::getNextEntry()",
		"installer.TarInputStream::read()",
		"installer.TarInputStream::read(byte[])",
		"installer.TarInputStream::read(byte[],int,int)",
		"installer.TarInputStream::copyEntryContents(java.io.OutputStream)",
		"installer.TarOutputStream::finish()",
		"installer.TarOutputStream::close()",
		"installer.TarOutputStream::putNextEntry(installer.TarEntry)",
		"installer.TarOutputStream::closeEntry()",
		"installer.TarOutputStream::write(int)",
		"installer.TarOutputStream::write(byte[])",
		"installer.TarOutputStream::write(byte[],int,int)",
		"installer.TarOutputStream::writeEOFRecord()",
		"org.gjt.sp.jedit.Abbrevs::loadAbbrevs(java.io.Reader)",
		"org.gjt.sp.jedit.Abbrevs::saveAbbrevs(java.io.Writer)",
		"org.gjt.sp.jedit.Abbrevs::saveAbbrevs(java.io.Writer,java.util.Hashtable)",
		"org.gjt.sp.jedit.View::restoreSplitConfig(org.gjt.sp.jedit.Buffer,java.lang.String)",
		"org.gjt.sp.jedit.PluginJAR::getZipFile()",
		"org.gjt.sp.jedit.PluginJAR::generateCache()",
		"org.gjt.sp.jedit.PluginJAR.PluginCacheEntry::read(java.io.DataInputStream)",
		"org.gjt.sp.jedit.PluginJAR.PluginCacheEntry::write(java.io.DataOutputStream)",
		"org.gjt.sp.jedit.PluginJAR.PluginCacheEntry::readString(java.io.DataInputStream)",
		"org.gjt.sp.jedit.PluginJAR.PluginCacheEntry::readURI(java.io.DataInputStream)",
		"org.gjt.sp.jedit.PluginJAR.PluginCacheEntry::readStringArray(java.io.DataInputStream)",
		"org.gjt.sp.jedit.PluginJAR.PluginCacheEntry::readBooleanArray(java.io.DataInputStream)",
		"org.gjt.sp.jedit.PluginJAR.PluginCacheEntry::readMap(java.io.DataInputStream)",
		"org.gjt.sp.jedit.PluginJAR.PluginCacheEntry::writeString(java.io.DataOutputStream,java.lang.Object)",
		"org.gjt.sp.jedit.PluginJAR.PluginCacheEntry::writeStringArray(java.io.DataOutputStream,java.lang.String[])",
		"org.gjt.sp.jedit.PluginJAR.PluginCacheEntry::writeBooleanArray(java.io.DataOutputStream,boolean[])",
		"org.gjt.sp.jedit.PluginJAR.PluginCacheEntry::writeMap(java.io.DataOutputStream,java.util.Map)",
		"org.gjt.sp.jedit.EditServer::handleClient(java.net.Socket,java.io.DataInputStream)",
		"org.gjt.sp.jedit.Java14.TextAreaTransferHandler::importFile(javax.swing.JComponent,java.awt.datatransfer.Transferable)",
		"org.gjt.sp.jedit.Java14.TextAreaTransferHandler::importText(javax.swing.JComponent,java.awt.datatransfer.Transferable)",
		"org.gjt.sp.jedit.PropertyManager::loadSystemProps(java.io.InputStream)",
		"org.gjt.sp.jedit.PropertyManager::loadSiteProps(java.io.InputStream)",
		"org.gjt.sp.jedit.PropertyManager::loadUserProps(java.io.InputStream)",
		"org.gjt.sp.jedit.PropertyManager::saveUserProps(java.io.OutputStream)",
		"org.gjt.sp.jedit.PropertyManager::loadPluginProps(java.io.InputStream)",
		"org.gjt.sp.jedit.PropertyManager::loadProps(java.util.Properties,java.io.InputStream)",
		"org.gjt.sp.jedit.buffer.BufferIORequest::autodetect(java.io.InputStream)",
		"org.gjt.sp.jedit.buffer.BufferIORequest::read(java.io.Reader,long,boolean)",
		"org.gjt.sp.jedit.buffer.BufferIORequest::readMarkers(org.gjt.sp.jedit.Buffer,java.io.InputStream)",
		"org.gjt.sp.jedit.buffer.BufferIORequest::write(org.gjt.sp.jedit.Buffer,java.io.OutputStream)",
		"org.gjt.sp.jedit.buffer.BufferIORequest::writeMarkers(org.gjt.sp.jedit.Buffer,java.io.OutputStream)",
		"org.gjt.sp.jedit.help.HelpIndex::indexDirectory(java.lang.String)",
		"org.gjt.sp.jedit.help.HelpIndex::indexJAR(java.util.zip.ZipFile)",
		"org.gjt.sp.jedit.help.HelpIndex::indexURL(java.lang.String)",
		"org.gjt.sp.jedit.help.HelpIndex::indexStream(java.io.InputStream,java.lang.String)",
		"org.gjt.sp.jedit.io.FileVFS::_createInputStream(java.lang.Object,java.lang.String,boolean,java.awt.Component)",
		"org.gjt.sp.jedit.io.UrlVFS::_createInputStream(java.lang.Object,java.lang.String,boolean,java.awt.Component)",
		"org.gjt.sp.jedit.io.UrlVFS::_createOutputStream(java.lang.Object,java.lang.String,java.awt.Component)",
		"org.gjt.sp.jedit.pluginmgr.PluginList::PluginList()",
		"org.gjt.sp.jedit.pluginmgr.Roster.Install::copy(org.gjt.sp.jedit.pluginmgr.PluginManagerProgress,java.io.InputStream,java.io.OutputStream,boolean)",
		"org.gjt.sp.jedit.pluginmgr.MirrorList::MirrorList()",
		"org.gjt.sp.jedit.proto.jeditresource.Handler::openConnection(java.net.URL)",
		"org.gjt.sp.jedit.proto.jeditresource.PluginResURLConnection::connect()",
		"org.gjt.sp.jedit.proto.jeditresource.PluginResURLConnection::getInputStream()"
	],
	"_id" : ObjectId("50314bd4a73473911e000001")
}]


unique_methods = []

r.forEach(function(x) {
  x.methods.forEach(function(m) {
    if ((unique_methods.indexOf(m) == -1) && (m.indexOf("org.gjt") == 0)) {
      unique_methods.push(m);
    } else {
      //console.log('repeated ' + m);
    }
  });
})

//console.log("Count: " + unique_methods.length)
unique_methods.forEach(function(x) { console.log(x) })